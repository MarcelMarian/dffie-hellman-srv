#!/bin/sh

# Build a Go application

set -eu

DEFAULT_OS=linux
DEFAULT_ARCH=amd64
DEFAULT_APPNAME=diffie-hellman-service
DEFAULT_VERSION=1.0.0
DEFAULT_REGISTRY=registry.gear.ge.com/csp
DEFAULT_PROTODIR=proto
DEFAULT_BUILD_IMAGE=diffie-hellman-service-golang:1.16.0-buster

: "${OS:=${DEFAULT_OS}}"
: "${ARCH:=${DEFAULT_ARCH}}"
: "${APPNAME:=${DEFAULT_APPNAME}}"
: "${VERSION:=${DEFAULT_VERSION}}"
: "${REGISTRY:=${DEFAULT_REGISTRY}}"
: "${BUILD_IMAGE:=${DEFAULT_BUILD_IMAGE}}"
: "${PROTODIR:=${DEFAULT_PROTODIR}}"
: "${http_proxy:=}"
: "${https_proxy:=}"
: "${no_proxy:=}"

# If running in a terminal, pass --tty to docker i.e. allocate a pseudo-tty for the container
[ -t 1 ] && TTY="--tty" || TTY=""

usage_and_exit() {
    >&2 echo "usage: $(basename "$0") [--push]"
    exit 1
}

PUSH=false
while [ $# -gt 0 ]; do
    key="$1"
    case $key in
        --push)
            PUSH=true
            shift # past argument
            ;;
        *)  # unknown option
            usage_and_exit
            ;;
    esac
done

# Build the Go application
echo "Building ${APPNAME} for ${ARCH}"
docker run --rm \
  ${TTY} \
  -v $(pwd):/src -w /src \
  -e http_proxy=$http_proxy -e https_proxy=$https_proxy -e no_proxy=$no_proxy \
  -e ARCH=${ARCH} \
  -e APPNAME=${APPNAME} \
  -e VERSION=${VERSION} \
  -e PROTODIR=${PROTODIR} \
  ${REGISTRY}/${BUILD_IMAGE} \
  build/build.sh

exit 0
